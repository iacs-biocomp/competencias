import { Component, OnInit } from '@angular/core';
import { MatSlideToggleChange } from '@angular/material/slide-toggle';
import { CompetenciasService, ComportService, EvaluacionesAdmService, NivelService } from 'services/data';
import { IEvaluacion } from 'sharedInterfaces/Entity';
import { LogService } from 'src/app/shared/log/log.service';

// TODO: Restructure into a layout and components
@Component({
	selector: 'app-list-ev',
	templateUrl: './list-ev.component.html',
	styleUrls: ['./list-ev.component.scss'],
})
export class ListEvComponent implements OnInit {
	data = {
		/** Evs in database */
		evaluaciones: [] as IEvaluacion[],
	};

	viewControls = {
		isDataLoaded: false,
		canCreateNewModel: false,
		canCreateNewEv: false,
	};

	/** Children components' ids */
	childrenIds = {
		createModalId: 'createModal',
		newEvModalId: 'newEvModal',
	};

	/** Object with functions and data related to showing-results buttons */
	showingResultsBtnControls = {
		textToAdd: 'slideResults-',
		/**
		 * @param evId The identifier of the evaluation
		 * @returns The btn identifier that can be decoded to get the evId
		 */
		encodeBtnId: (evId: IEvaluacion['id']): string => {
			return `${this.showingResultsBtnControls.textToAdd}${evId}`;
		},

		/**
		 * @param btnId The btnId to be decoded
		 * @returns The evId decoded from the btnId
		 */
		decodeBtnId: (btnId: string): IEvaluacion['id'] => {
			return Number.parseInt(btnId.slice(this.showingResultsBtnControls.textToAdd.length, btnId.length));
		},
	};

	constructor(
		private readonly evSv: EvaluacionesAdmService,
		private readonly logger: LogService,
		private readonly nivSv: NivelService,
		private readonly comportSv: ComportService,
		private readonly compSv: CompetenciasService,
	) {}

	ngOnInit(): void {
		this.logger.verbose(`ngOnInit ${this.constructor.name}`);
		(async () => {
			this.data.evaluaciones = await this.evSv.getAll();
			const [nivCount, comportCount, compCount] = await Promise.all([
				this.nivSv.getCountReference(),
				this.comportSv.getCount(),
				this.compSv.getCount(),
			]);
			this.viewControls.canCreateNewModel = this.canCreateNewModel(nivCount, comportCount, compCount);
			this.viewControls.canCreateNewEv = this.canCreateNewEv();
			this.viewControls.isDataLoaded = true;
		})();
	}

	private canCreateNewModel(nivCount: number, comportCount: number, compCount: number): boolean {
		return nivCount > 0 && comportCount > 0 && compCount > 0;
	}

	private canCreateNewEv(): boolean {
		// TODO: Completar obteniendo numero de modelos creados, si es mayor a 0 true
		return true;
	}

	async updateEvalView(): Promise<void> {
		this.logger.verbose('Actualizando vista de ListEvComponent');
		this.data.evaluaciones = await this.evSv.getAll();
	}

	/**
	 * Method that updates ev.isShowingResults posting to the backend when slideToggleBtn value changes
	 * @param event Event generated by MatSlideToggle Component
	 */
	async showingResultsBtnUpdate(event: MatSlideToggleChange): Promise<void> {
		const evIdDecoded = this.showingResultsBtnControls.decodeBtnId(event.source.id);
		let evToModify = this.data.evaluaciones.find(ev => ev.id === evIdDecoded);
		if (!evToModify) {
			const err = new Error('This should never happen, contact a programmer, probably decodeBtnId fn failed');
			this.logger.error('Error:', err);
			throw err;
		}
		this.evSv.updateShowingResults({ id: evToModify.id, isShowingResults: event.checked });
	}
}
